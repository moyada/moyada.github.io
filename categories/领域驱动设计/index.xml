<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>领域驱动设计 | 疯狂的厨子</title>
    <link>https://moyada.github.io/categories/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</link>
      <atom:link href="https://moyada.github.io/categories/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/index.xml" rel="self" type="application/rss+xml" />
    <description>领域驱动设计</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>zh-Hans</language><copyright>© 2017 - 2020 moyada</copyright><lastBuildDate>Sun, 28 Oct 2018 19:54:02 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=true) shape:circle]</url>
      <title>领域驱动设计</title>
      <link>https://moyada.github.io/categories/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</link>
    </image>
    
    <item>
      <title>领域驱动设计学习</title>
      <link>https://moyada.github.io/post/domain-driven-design/</link>
      <pubDate>Sun, 28 Oct 2018 19:54:02 +0000</pubDate>
      <guid>https://moyada.github.io/post/domain-driven-design/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;一个应用系统常常包含许多模块，有基础组件、业务逻辑、数据操作、外部依赖、服务提供等等。但软件系统发展到一定程度时，其复杂性也随之增长，给后期的开发和维护带来难度。&lt;/p&gt;
&lt;p&gt;而领域驱动设计则是针对 &lt;code&gt;复杂性&lt;/code&gt; 的一个解决手段，使架构能够自我进化。同时由于领域驱动设计强调领域模型的重要性，与微服务思想恰到好处，自然被越来越多的架构设计所采纳。&lt;/p&gt;
&lt;p&gt;软件的复杂性，其源头主要是由于对业务需求的抽象设计不足所导致的，按照我在日常开发流程中的接触，认为主要原因是 &lt;code&gt;分工&lt;/code&gt; 所导致的认识不全面，开发人员只关注于需求，没有梳理出项目所需的业务知识。&lt;/p&gt;
&lt;p&gt;一个完整的领域驱动设计周期需要包括 
&lt;a href=&#34;#%e5%bb%ba%e6%a8%a1&#34;&gt;建立业务领域模型&lt;/a&gt;、
&lt;a href=&#34;#%e5%88%86%e6%9e%90%e5%9c%ba%e6%99%af&#34;&gt;分析领域场景&lt;/a&gt;、
&lt;a href=&#34;#%e5%bb%ba%e7%ab%8b%e7%bb%9f%e4%b8%80%e8%af%ad%e8%a8%80&#34;&gt;建立统一语言&lt;/a&gt;、
&lt;a href=&#34;#%e9%99%90%e7%95%8c%e4%b8%8a%e4%b8%8b%e6%96%87&#34;&gt;识别限界上下文&lt;/a&gt;、
&lt;a href=&#34;#%e5%88%86%e5%b1%82%e6%9e%b6%e6%9e%84&#34;&gt;设计分层架构&lt;/a&gt; 这几个阶段。&lt;/p&gt;
&lt;h2 id=&#34;建模&#34;&gt;建模&lt;/h2&gt;
&lt;p&gt;领域建模是领域驱动设计周期中最重要的一个阶段，一个良好的模型设计能使得系统结构清晰整洁、分层合理，对日后的变化达到可进化性、可扩展性、可定制性。&lt;/p&gt;
&lt;p&gt;这个阶段需要先与项目的相关人员都进行沟通，基于对象事件进行分析说明，解决存在困惑，使得成员对业务期望有普遍理解，初步达成领域知识的共识。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;首先，需要对业务建立逻辑模型与物理模型，识别业务需求，将业务逻辑与技术实现进行隔离。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对业务逻辑进行分治、抽象、封装，做到化繁为简，降低系统的复杂性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分析识别问题域，根据需求目标的重要性确定其优先级（主要功能与基础功能先之、外部协作功能次之）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Event_storming&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;事件风暴&lt;/a&gt; 是一个常用且高效的领域事件建模方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;分析场景&#34;&gt;分析场景&lt;/h2&gt;
&lt;p&gt;通过分析业务逻辑提炼场景，才能更好的完善领域模型，常用的方式有 用例、用户故事、测试驱动开发，每个方式的关注点也大相径庭。&lt;/p&gt;
&lt;h2 id=&#34;用例&#34;&gt;用例&lt;/h2&gt;
&lt;p&gt;用例是软件开发中最熟悉的设计方法，它以 &lt;code&gt;领域&lt;/code&gt; 为核心，通过梳理整个流程，抽象出业务领域模型。&lt;/p&gt;
&lt;h2 id=&#34;用户故事&#34;&gt;用户故事&lt;/h2&gt;
&lt;p&gt;相比与用例的抽象，用户故事则是具体的。它将接收特定的事件并根据一定的条件转化为结果进行输出，强调 &lt;code&gt;业务规则&lt;/code&gt; 与 &lt;code&gt;业务流程&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;测试驱动开发&#34;&gt;测试驱动开发&lt;/h2&gt;
&lt;p&gt;测试驱动开发的目的在于对职责进行 &lt;code&gt;拆分&lt;/code&gt;，模拟现实场景分解任务，保证测试任务的粒度足够细。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.jdon.com/mda/archetypes.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;四色原型&lt;/a&gt; 是对事件分析的手段，也叫 彩色UML。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;建立统一语言&#34;&gt;建立统一语言&lt;/h2&gt;
&lt;p&gt;统一语言是领域驱动设计之中十分重要的一个环节，其核心价值在于 &lt;code&gt;理解&lt;/code&gt;。在进行需求沟通时，为避免不一致的理解所产生的认识障碍，需要建立出团队中各个成员都理解的的术语进行交流，这一过程就是建立统一语言。&lt;/p&gt;
&lt;p&gt;统一语言体现在两个方面：统一的领域术语、领域行为描述&lt;/p&gt;
&lt;h2 id=&#34;统一的领域术语&#34;&gt;统一的领域术语&lt;/h2&gt;
&lt;p&gt;领域术语的设立目的是为了规避那些表达含义混淆的术语，提高沟通和交流的效率。&lt;/p&gt;
&lt;p&gt;正确的术语建立需要业务人员通过对模型需求进行分析，提炼出概念一致的中英文语言及解释，甚至提供详细的案例说明来确保能够做到表达明确，并通过 &lt;code&gt;术语表&lt;/code&gt; 进行维护。&lt;/p&gt;
&lt;h2 id=&#34;领域行为描述&#34;&gt;领域行为描述&lt;/h2&gt;
&lt;p&gt;领域行为描述是对业务过程的详细解释，遵守且延伸于领域术语，侧重于体现完整的业务需求以及复杂的业务规则。&lt;/p&gt;
&lt;p&gt;根据领域行为描述中的前置条件、业务规则、流程状态、执行结果，并且直接融入编码实现，使得代码逻辑清晰可读，自身就能对领域行为进行描述。&lt;/p&gt;
&lt;h2 id=&#34;限界上下文&#34;&gt;限界上下文&lt;/h2&gt;
&lt;p&gt;限界上下文的含义是保证目标业务流程不受外部因素干扰，即项目的系统架构与组织结构都是可控的。要正确理解限界上下文，就需要对 &lt;code&gt;上下文&lt;/code&gt; 和 &lt;code&gt;边界&lt;/code&gt; 有清晰的认识。&lt;/p&gt;
&lt;h2 id=&#34;上下文&#34;&gt;上下文&lt;/h2&gt;
&lt;p&gt;上下文划分的价值主要体现在三个方面，领域逻辑层面、团队合作层面、技术实现层面。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;领域逻辑层面
限界上下文确定了领域模型的业务边界，维护了模型的完整性与一致性，从而降低系统的业务复杂度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;团队合作层面
限界上下文确定了开发团队的工作边界，建立了团队之间的合作模式，避免团队之间的沟通变得混乱，从而降低系统的管理复杂度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;技术实现层面
限界上下文确定了系统架构的应用边界，保证了系统层和上下文领域层各自的一致性，建立了上下文之间的集成方式，从而降低系统的技术复杂度。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;边界&#34;&gt;边界&lt;/h2&gt;
&lt;p&gt;边界的职责是确定限界上下文的 &lt;code&gt;控制力&lt;/code&gt;，体现了高内聚低耦合的思想，主要包括以下几个要素。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;最小完备
要求限界上下文的控制权在其自身，无需依赖其他上下文的信息，整个业务流程是安全的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自我履行
自我履行是指对外部的请求能够很好的判断该请求是否属性当前上下文的职责范围内，还是应该交付给其他上下文。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;稳定空间
稳定空间就是要对限界上下文拥有掌控权，对外部交互以接口的形式进行抽象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;独立进化
指的是当限界上下文发生变化时，不会对外界造成影响，意在服务演化中的兼容性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;分层架构&#34;&gt;分层架构&lt;/h2&gt;
&lt;p&gt;软件设计中的分层架构已经成为了开发人员心中的规范了，领域驱动设计也有一套分层的依据与原则。&lt;/p&gt;
&lt;p&gt;分层的方式一般是对系统整体进行水平切分，目的在于打造出抽象层次不同的架构，将业务与技术分离开。&lt;/p&gt;
&lt;p&gt;根据关注点可分为面向用户、面向应用、面向业务、面向资源，业务相关性由低至高。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据业务特性，设计适当的分层架构。例如 六边形架构、洋葱圈架构、事件驱动模型、函数式编程、QCRS模式 等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;面向资源&#34;&gt;面向资源&lt;/h2&gt;
&lt;p&gt;该层为基础设施层，主要提供了具体的外部资源获取方式，可能有数据库、文件系统、远程通信，属于最稳定的一组服务。&lt;/p&gt;
&lt;h2 id=&#34;面向业务&#34;&gt;面向业务&lt;/h2&gt;
&lt;p&gt;该层为业务流程的拆分，将职责的抽象与实现剥离，提供抽象的接口，隐藏内部的实现。&lt;/p&gt;
&lt;h2 id=&#34;面向应用&#34;&gt;面向应用&lt;/h2&gt;
&lt;p&gt;该层为业务流程的合成，根据业务规则将抽象接口进行组装，通过依赖注入实现接口，提供完整的业务功能。&lt;/p&gt;
&lt;h2 id=&#34;面向用户&#34;&gt;面向用户&lt;/h2&gt;
&lt;p&gt;该层的职责主要提供了外部进程访问领域资源的手段，这里的用户可以是前端接口、远程通信服务。&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/moyada/domain-driven-design-archetype&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于个人理解的六边形架构的 maven archetype 实现&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jdon.com/ddd.html&#34;&gt;https://www.jdon.com/ddd.html&lt;/a&gt;
&lt;a href=&#34;https://www.jianshu.com/p/b6ec06d6b594&#34;&gt;https://www.jianshu.com/p/b6ec06d6b594&lt;/a&gt;
&lt;a href=&#34;https://tech.meituan.com/DDD%20in%20practice.html&#34;&gt;https://tech.meituan.com/DDD%20in%20practice.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>
