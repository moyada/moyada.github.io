<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring | 不睡觉的猫头鹰</title>
    <link>https://moyada.github.io/categories/spring/</link>
      <atom:link href="https://moyada.github.io/categories/spring/index.xml" rel="self" type="application/rss+xml" />
    <description>Spring</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>zh-Hans</language><copyright>© 2017 - 2020 moyada</copyright><lastBuildDate>Sun, 13 Jan 2019 21:39:24 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=true) shape:circle]</url>
      <title>Spring</title>
      <link>https://moyada.github.io/categories/spring/</link>
    </image>
    
    <item>
      <title>synchronized 原理总结</title>
      <link>https://moyada.github.io/post/java-synchronized/</link>
      <pubDate>Sun, 13 Jan 2019 21:39:24 +0000</pubDate>
      <guid>https://moyada.github.io/post/java-synchronized/</guid>
      <description>&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;在 Java 中 &lt;code&gt;synchronized&lt;/code&gt; 是用于并发环境下使用临界区的原语。&lt;/p&gt;
&lt;p&gt;它是通过获取对象头的 Mark Word 来实现互斥功能的，当使用方式不同时所操作的对象也不同。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;声明在方法内时，锁对象由开发者所指定&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;声明在方法上，锁对象则为当前类的实例&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;声明在静态方法上，锁对象就是由类加载器所加载的 Class&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里简单记录 &lt;code&gt;synchronized&lt;/code&gt; 代码块在虚拟机内部的运转，版本为 OpenJDK11。&lt;/p&gt;
&lt;h2 id=&#34;获取同步锁&#34;&gt;获取同步锁&lt;/h2&gt;
&lt;p&gt;当线程进入临界区时，会根据是否开启了偏向锁选择进入 &lt;code&gt;ObjectSynchronizer::fast_enter&lt;/code&gt; 方法或者 &lt;code&gt;ObjectSynchronizer::slow_enter&lt;/code&gt; 方法。&lt;/p&gt;
&lt;h3 id=&#34;objectsynchronizerfast_enter&#34;&gt;ObjectSynchronizer::fast_enter&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;检查当前 Mark Word 的锁状态是否为偏向锁，否则进入 &lt;code&gt;slow_enter&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;检查虚拟机当前是否处于安全点，是则先进行检查是否需要撤销偏向锁。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;检查对象头是否为偏向锁模式，否则使用 CAS 修改 Mark Word 存储的线程 id，并初始化获取锁时间点和年龄。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当已经处于偏向锁模式时，并且当前占有锁的时间已过期，则可以使用 CAS 进行锁替换或者更新年龄。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当任意 CAS 操作失败时，则表明存在其他线程已对锁状态进行了修改，需要执行 &lt;code&gt;slow_enter&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更新对象头信息，检查是否需要撤销偏向锁。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;objectsynchronizerslow_enter&#34;&gt;ObjectSynchronizer::slow_enter&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;判断 Mark Word 的锁状态是否为无锁或偏向锁，是则使用 CAS 修改对象头，成功后对当前 Region 栈锁进行释放。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;否则判断 Mark Word 的锁状态是否为轻量级锁，并且对对象头的 BasicLock 进行加锁。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;失败时将修改对象头使其不可重入，并将锁膨胀为重量级锁，修改 Mark Word。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过 &lt;code&gt;ObjectMonitor&lt;/code&gt; 管理当前线程，当对象头为轻量级锁时，获取空闲 ObjectMonitor 使用，并配置至对象头内。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;ObjectMonitor 的获取方式为依次从 &lt;code&gt;线程空间中查找空闲监视器&lt;/code&gt;、&lt;code&gt;全局空间中查找空闲监视器&lt;/code&gt;、&lt;code&gt;重新创建监视器&lt;/code&gt; 选取尝试。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;等待与唤醒&#34;&gt;等待与唤醒&lt;/h2&gt;
&lt;h3 id=&#34;wait&#34;&gt;wait&lt;/h3&gt;
&lt;p&gt;当处于临界区内的线程由于某种原因选择将自身挂起时，将执行 &lt;code&gt;ObjectSynchronizer::wait&lt;/code&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;判断当前 Mark Word 是否为偏向锁，是则对其进行撤销。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;释放临界区占用锁，获取管理当前线程的的 &lt;code&gt;ObjectMonitor&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将线程封装为 &lt;code&gt;ObjectWaiter&lt;/code&gt; 加入至 &lt;code&gt;_WaitSet&lt;/code&gt; 队尾。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置 LoadLoad 内存屏障，防止重排序问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;判断是否该等待线程是否已经存在，是否重新启动该线程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关闭非运行线程与重入锁的响应。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;判断线程是否已被中断，是则抛出异常。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;notifynotifyall&#34;&gt;notify/notifyAll&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;检查等待队列 &lt;code&gt;_WaitSet&lt;/code&gt;，为空则直接返回。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;_WaitSetLock&lt;/code&gt; 保护操作等待队列不被其他线程干扰。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据策略选择从等待队列中获取元素加入到阻塞队列 &lt;code&gt;_EntryList&lt;/code&gt; 或 &lt;code&gt;_cxq&lt;/code&gt; 或 直接唤醒。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置被移动线程为可与重入锁响应。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;释放 &lt;code&gt;_WaitSetLock&lt;/code&gt; 锁。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;阻塞线程&#34;&gt;阻塞线程&lt;/h2&gt;
&lt;h3 id=&#34;enter&#34;&gt;enter&lt;/h3&gt;
&lt;p&gt;当进入临界区的线程获取锁失败时，将交由锁对象的 &lt;code&gt;objectMonitor&lt;/code&gt; 来管理，调用 &lt;code&gt;enter&lt;/code&gt; 方法修改该线程状态为阻塞，并封装为 &lt;code&gt;ObjectWaiter&lt;/code&gt; 加入到名为 &lt;code&gt;_EntryList&lt;/code&gt; 的链表中。&lt;/p&gt;
&lt;h3 id=&#34;exit&#34;&gt;exit&lt;/h3&gt;
&lt;p&gt;当有线程离开临界区，将会调用 objectMonitor 的 &lt;code&gt;exit&lt;/code&gt; 方法，根据 QMode 的不同的选择从 阻塞队列 或 等待队列 中获取 &lt;code&gt;ObjectWaiter&lt;/code&gt;，也可能将等待队列的部分或全部加入阻塞队列后从阻塞队列中获取。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
